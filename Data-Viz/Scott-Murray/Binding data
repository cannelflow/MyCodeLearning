//html file
<!DOCTYPE html>
<html>
<head>
    <title>D3 Tutorial Demo</title>
	<meta charset="utf-8" />
    <link href="../Content/bootstrap-theme.min.css" rel="stylesheet" />
    <link href="../Content/bootstrap.min.css" rel="stylesheet" />
    <script src="../Scripts/d3/d3.min.js"></script>
    <link href="demo.css" rel="stylesheet" />
</head>
<body>
    <script src="../Scripts/jquery-2.2.1.min.js"></script>
    <script src="../Scripts/bootstrap.min.js"></script>
    <script src="demo.js"></script>
</body>
</html>
//js file
/*
With D3, we bind our data input values to elements in the DOM. Binding is like “attaching” or 
associating data to specific elements, so that later you can reference those values to apply mapping rules. Without the 
binding step, we have a bunch of data-less, un-mappable DOM elements. No one wants that.
*/
var dataset = [5, 10, 15, 20, 25];
var body = d3.select("body");
//data binding
var para = body.selectAll("p").
    data(dataset);
//Enter
para.
    enter().
    append("p");
//update
para.
    text("This Is New Paragraph");
//Exit
para.
    exit().
    remove();
/*
d3.select("body") — Finds the body in the DOM and hands a reference off to the next step in the chain.

.selectAll("p") — Selects all paragraphs in the DOM. Since none exist yet, this returns an empty selection. 
Think of this empty selection as representing the paragraphs that will soon exist.

.data(dataset) — Counts and parses our data values. There are five values in our data set, so everything past 
this point is executed five times, once for each value.

.enter() — To create new, data-bound elements, you must use enter(). This method looks at the DOM, and then at the 
data being handed to it. If there are more data values than corresponding DOM elements, then enter() creates a new 
placeholder element on which you may work your magic. It then hands off a reference to this new placeholder to the next step in the chain.

.append("p") — Takes the placeholder selection created by enter() and inserts a p element into the DOM. Hooray! 
Then it hands off a reference to the element it just created to the next step in the chain.

.text("New paragraph!") — Takes the reference to the newly created p and inserts a text value.
*/
