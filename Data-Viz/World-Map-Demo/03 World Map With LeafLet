//html file
<!DOCTYPE html>
<html>
<head>
    <title>Forced Layout</title>
    <meta charset="utf-8" />
    <link href="../Content/bootstrap-theme.min.css" rel="stylesheet" />
    <link href="../Content/bootstrap.min.css" rel="stylesheet" />
    <script src="../Scripts/d3/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3-tip/0.6.7/d3-tip.min.js"></script>
    <link rel="stylesheet" type="text/css" href="http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.css" />
    <script type='text/javascript' src='//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js'></script>
    <script type='text/javascript' src='http://cdn.leafletjs.com/leaflet-0.7.2/leaflet.js?2'></script>
    <script type='text/javascript' src='http://aratcliffe.github.io/Leaflet.tooltip/dist/leaflet.tooltip.js'></script>
    <link href="demo.css" rel="stylesheet" />
</head>
<body>
    <!--
       <div class="mainContainer text-center">
        <div id="chart"></div>
    </div>
      -->

    <div id="map"></div>
    <script src="../Scripts/jquery-2.2.1.min.js"></script>
    <script src="../Scripts/bootstrap.min.js"></script>
    <script src="demo.js"></script>
</body>
</html>
//js file
// load and display the World
d3.json("https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/meteorite-strike-data.json", function (error, data) {

    var color = d3.scale.category20c();
    var map = L.map('map', {
        center: [20.0, 5.0],
        minZoom: 2,
        zoom: 2
    });
    L.tileLayer('http://{s}.mqcdn.com/tiles/1.0.0/map/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="http://osm.org/copyright" title="OpenStreetMap" target="_blank">OpenStreetMap</a> contributors | Tiles Courtesy of <a href="http://www.mapquest.com/" title="MapQuest" target="_blank">MapQuest</a> <img src="http://developer.mapquest.com/content/osm/mq_logo.png" width="16" height="16">',
        subdomains: ['otile1', 'otile2', 'otile3', 'otile4']
    }).addTo(map);

    var radiusScale = d3.scale.linear()
      .domain(d3.extent(data.features, function (d) {
          return +d.properties.mass+10;
      }))
      .range([50, 100]);
  
    data.features.forEach(function (data2, i) {
        var massScale = +data2.properties.mass;
        var abc = function () {
            if (massScale < 180000)
                return 1.5;
            else if (massScale < 180000 * 2)
                return 5;
            else if (massScale < 180000 * 3)
                return 10;
            else if (massScale < 180000 * 10)
                return 15;
            else if (massScale < 180000 * 20)
                return 20;
            else if (massScale < 180000 * 50)
                return 30;
            else
                return 40;
        };
       
        var coordinates = ([+data2.properties.reclat, +data2.properties.reclong]);
        var c = color(i);
        var circle = L.circle([coordinates[0], coordinates[1]], 500, {
            tooltip: {
                html: "I'm a tooltip!"
            },
            color: c
        }).addTo(map);
    });
});
//css file
#map {
    height:750px;
    border:1px solid black;
}
